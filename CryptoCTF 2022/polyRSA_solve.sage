from Crypto.Util.number import long_to_bytes

n = 44538727182858207226040251762322467288176239968967952269350336889655421753182750730773886813281253762528207970314694060562016861614492626112150259048393048617529867598499261392152098087985858905944606287003243
enc = 37578889436345667053409195986387874079577521081198523844555524501835825138236698001996990844798291201187483119265306641889824719989940722147655181198458261772053545832559971159703922610578530282146835945192532

F.<k> = PolynomialRing(QQ)

f = ((k**6 + 7*k**4 - 40*k**3 + 12*k**2 - 114*k + 31377) * (k**5 - 8*k**4 + 19*k**3 - 313*k**2 - 14*k + 14011)) - n

nbit = f.roots()[0][0]

p = nbit**6 + 7*nbit**4 - 40*nbit**3 + 12*nbit**2 - 114*nbit + 31377
q = nbit**5 - 8*nbit**4 + 19*nbit**3 - 313*nbit**2 - 14*nbit + 14011
assert p*q == n

e = 31337
d = pow(e,-1,(p-1)*(q-1))

print(long_to_bytes(pow(int(enc),int(d),int(n))).decode())

#CCTF{F4C70r!N9_tRIcK5_aR3_fUN_iN_RSA?!!!}